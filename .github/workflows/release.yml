name: Build and Release

on:
  push:
    tags:
      - 'v*'  # Triggers on version tags like v1.0.13
  workflow_dispatch:
    inputs:
      version:
        description: 'Version number (e.g., 1.0.13)'
        required: true
        type: string

jobs:
  build-and-release:
    runs-on: windows-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: '8.0.x'
        
    - name: Restore dependencies
      run: dotnet restore App/DxfTool.sln
      
    - name: Get version
      id: get_version
      run: |
        if ("${{ github.event_name }}" -eq "workflow_dispatch") {
          $version = "${{ github.event.inputs.version }}"
        } else {
          $version = "${{ github.ref_name }}".TrimStart("v")
        }
        echo "VERSION=$version" >> $env:GITHUB_OUTPUT
        echo "Building version: $version"
      shell: powershell
      
    - name: Update version in project file
      run: |
        $version = "${{ steps.get_version.outputs.VERSION }}"
        $projectPath = "App/DxfTool/DxfTool.csproj"
        $content = Get-Content $projectPath
        $content = $content -replace "<AssemblyVersion>.*</AssemblyVersion>", "<AssemblyVersion>$version.0</AssemblyVersion>"
        $content = $content -replace "<FileVersion>.*</FileVersion>", "<FileVersion>$version.0</FileVersion>"
        $content = $content -replace "<Version>.*</Version>", "<Version>$version.0</Version>"
        $content = $content -replace "<ApplicationVersion>.*</ApplicationVersion>", "<ApplicationVersion>$version.0</ApplicationVersion>"
        Set-Content $projectPath $content
      shell: powershell
      
    - name: Build application
      run: |
        dotnet publish App/DxfTool/DxfTool.csproj `
          --configuration Release `
          --runtime win-x64 `
          --self-contained true `
          --output ./publish/win-x64 `
          -p:PublishSingleFile=true `
          -p:IncludeNativeLibrariesForSelfExtract=true
          
    - name: Build portable version
      run: |
        dotnet publish App/DxfTool/DxfTool.csproj `
          --configuration Release `
          --runtime win-x64 `
          --self-contained true `
          --output ./publish/portable `
          -p:PublishSingleFile=true `
          -p:IncludeNativeLibrariesForSelfExtract=true
          
    - name: Install Squirrel
      run: dotnet tool install --global squirrel
      
    - name: Create Squirrel package
      run: |
        $version = "${{ steps.get_version.outputs.VERSION }}"
        
        # Create a simple nuspec file for Squirrel
        @"
        <?xml version="1.0" encoding="utf-8"?>
        <package xmlns="http://schemas.microsoft.com/packaging/2010/07/nuspec.xsd">
          <metadata>
            <id>DxfTools</id>
            <version>$version</version>
            <title>DXF Tools Professional</title>
            <authors>mniami</authors>
            <description>High Points Finder and GPS Coordinates Extractor for DXF files</description>
            <requireLicenseAcceptance>false</requireLicenseAcceptance>
          </metadata>
        </package>
        "@ | Out-File -FilePath "./DxfTools.nuspec" -Encoding UTF8
        
        # Create Squirrel package
        squirrel pack --packId DxfTools --packVersion $version --packDirectory ./publish/win-x64 --releaseDir ./releases
      shell: powershell
        
    - name: Create ZIP archives
      run: |
        $version = "${{ steps.get_version.outputs.VERSION }}"
        
        # Create ZIP for installer version
        Compress-Archive -Path "./releases/*" -DestinationPath "./DxfTools-v$version-installer.zip"
        
        # Create ZIP for portable version
        Compress-Archive -Path "./publish/portable/*" -DestinationPath "./DxfTools-v$version-portable.zip"
      shell: powershell
      
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref_name || format('v{0}', steps.get_version.outputs.VERSION) }}
        release_name: DXF Tools v${{ steps.get_version.outputs.VERSION }}
        body: |
          ## DXF Tools Professional v${{ steps.get_version.outputs.VERSION }}
          
          ### ðŸš€ What's New
          - Bug fixes and improvements
          - Enhanced stability
          
          ### ðŸ“¦ Download Options
          
          **Recommended: Auto-Updating Installer**
          - Download `DxfTools-v${{ steps.get_version.outputs.VERSION }}-installer.zip`
          - Extract and run `Setup.exe`
          - Automatic updates will be delivered seamlessly
          
          **Portable Version**
          - Download `DxfTools-v${{ steps.get_version.outputs.VERSION }}-portable.zip`
          - Extract and run `DxfTool.exe`
          - No installation required, but manual updates needed
          
          ### ðŸ”§ Requirements
          - Windows 10 or later
          - .NET 8 Runtime (included in self-contained builds)
          
        draft: false
        prerelease: false
        
    - name: Upload Installer
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./DxfTools-v${{ steps.get_version.outputs.VERSION }}-installer.zip
        asset_name: DxfTools-v${{ steps.get_version.outputs.VERSION }}-installer.zip
        asset_content_type: application/zip
        
    - name: Upload Portable
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./DxfTools-v${{ steps.get_version.outputs.VERSION }}-portable.zip
        asset_name: DxfTools-v${{ steps.get_version.outputs.VERSION }}-portable.zip
        asset_content_type: application/zip
